<?php

namespace HuubVerbeek\QueryWatcher\Tests\Unit;

use HuubVerbeek\QueryWatcher\Facades\QueryWatcher;
use HuubVerbeek\QueryWatcher\Tests\TestCase;
use Illuminate\Database\ConnectionInterface;
use Illuminate\Database\Events\QueryExecuted;

class CatchQueryTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->defaultSql = 'select * from users';
        $this->defaultTime = 0.80;
    }

    public function fireEvent(?string $sql = null, ?float $time = null, mixed $bindings = null)
    {
        event(new QueryExecuted(
            $sql ?? $this->defaultSql,
                $bindings ?? [],
                $time ?? $this->defaultTime,
            app(ConnectionInterface::class))
        );
    }

    public function test_can_catch_a_queries()
    {
        $i = 0;

        $expected = 10;

        QueryWatcher::watch();

        while ($i < $expected) {
            $this->fireEvent();

            $i++;
        }

        $this->assertCount($expected, QueryWatcher::queries());

        QueryWatcher::assertNoSlowQueries();
    }

    public function test_can_catch_slow_queries()
    {
        $i = 1;

        $expected = 10;

        $slowAfter = 0.5;

        QueryWatcher::isSlowAfter($slowAfter)->watch();

        while ($i <= $expected) {
            $this->fireEvent(
                $this->defaultSql,
                $i / $expected
            );

            $i++;
        }

        $this->assertCount($expected - ($expected * $slowAfter), QueryWatcher::slowQueries());

        QueryWatcher::assertHasSlowQueries();
    }

    public function test_can_catch_duplicate_queries()
    {
        $i = $j = $k = $l = $m = 1;

        QueryWatcher::watch();

        // Duplicates with empty bindings.
        while ($i <= 2) {
            $this->fireEvent($this->defaultSql, $this->defaultTime, '');
            $i++;
        }

        while ($j <= 2) {
            $this->fireEvent();
            $j++;
        }

        // Duplicates with non-empty bindings.
        while ($k <= 2) {
            $this->fireEvent($this->defaultSql, $this->defaultTime, ['user_id' => '1']);
            $k++;
        }

        while ($l <= 2) {
            $this->fireEvent('select * from teams', $this->defaultTime, ['user_id' => '1']);
            $l++;
        }

        while ($m <= 2) {
            $this->fireEvent($this->defaultSql, $this->defaultTime, ['user_id' => '2']);
            $m++;
        }

        // Unique with non-empty bindings

        $this->fireEvent('select * from teams', $this->defaultTime, ['user_id' => '2']);

        $this->fireEvent($this->defaultSql, $this->defaultTime, ['user_id' => '3']);

        $this->fireEvent($this->defaultSql, $this->defaultTime, ['user_id' => '4']);

        // Unique with empty bindings

        $this->fireEvent('select * from tokens');

        $this->assertCount(10, QueryWatcher::duplicateQueries());

        QueryWatcher::assertHasDuplicateQueries();
    }
}
